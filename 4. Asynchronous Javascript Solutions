/* CHALLENGE 1 */

function sayHowdy() {
  console.log('Howdy');
}

function testMe() {
  setTimeout(sayHowdy, 0);
  console.log('Partnah');
}
// After thinking it through, uncomment the following line to check your guess!
// testMe(); // what order should these log out? Howdy or Partnah first?


/* CHALLENGE 2 */

function delayedGreet() {
  // ADD CODE HERE
  setTimeout( ()=> console.log('welcome'), 3000);
}
// Uncomment the following line to check your work!
// delayedGreet(); // should log (after 3 seconds): welcome


/* CHALLENGE 3 */

function helloGoodbye() {
  // ADD CODE HERE
  console.log('hello');
  setTimeout(()=>console.log('good bye'), 2000)
}
// Uncomment the following line to check your work!
// helloGoodbye(); // should log: hello // should also log (after 3 seconds): good bye


/* CHALLENGE 4 */

function brokenRecord() {
  // ADD CODE HERE
  setInterval(()=>console.log('hi again'), 1000);
}
// Uncomment the following line to check your work!
// brokenRecord(); // should log (every second): hi again


/* CHALLENGE 5 */

function limitedRepeat() {
  // ADD CODE HERE
  const id = setInterval(()=>console.log('hi for now'), 1000);
  setTimeout(()=>clearInterval(id), 5000);
}
// Uncomment the following line to check your work!
// limitedRepeat(); // should log (every second, for 5 seconds): hi for now


/* CHALLENGE 6 */

function everyXsecsForYsecs(func, interval, duration) {
  // ADD CODE HERE
  const id = setInterval(func, interval*1000);
  setTimeout(()=>clearInterval(id), duration*1000);
}
// Uncomment the following lines to check your work!
// function theEnd() {
//   console.log('This is the end!');
// }
// everyXsecsForYsecs(theEnd, 2, 20); // should invoke theEnd function every 2 seconds, for 20 seconds): This is the end!


/* CHALLENGE 7 */

function delayCounter(target, wait) {
	return () => {
    for(let counter = 1; counter <= target;counter++) setTimeout(()=>{
      console.log(`log ${counter}`);
    }, counter*wait)
  }
}

// UNCOMMENT THESE TO TEST YOUR WORK!
// const countLogger = delayCounter(3, 1000)
// countLogger();
// After 1 second, log 1
// After 2 seconds, log 2
// After 3 seconds, log 3

/* CHALLENGE 8 */

function promised (val) {
  // ADD CODE HERE
  return new Promise(resolve => setTimeout(() => resolve(val), 2000)); 
}

// UNCOMMENT THESE TO TEST YOUR WORK!
// const createPromise = promised('wait for it...') // Pass in your message to promised function
// createPromise
//     .then(val => console.log(val))
//     .catch(err => console.log(err)) 
// will log "wait for it..." to the console after 2 seconds

/* CHALLENGE 9 */

class SecondClock {
  constructor(cb) {
    // ADD CODE HERE
    this.cb = cb;
    this.seconds = 0;
    this.id = undefined;
  }
  // ADD METHODS HERE
  start() {
    this.id = setInterval(() => {
    	this.seconds++;
    	this.cb(this.seconds % 61)	
    }, 1000);
  }
  reset() {
		clearInterval(this.id);
    this.id = undefined;
    this.seconds = 0;
  }
}

// UNCOMMENT THESE TO TEST YOUR WORK!
// const clock = new SecondClock((val) => { console.log(val) });

// console.log("Started Clock.");
// clock.start();

// setTimeout(() => {
//     clock.reset();
//     console.log("Stopped Clock after 6 seconds.");
// }, 6000);

/* CHALLENGE 10 */

function debounce(callback, interval) {
  // ADD CODE HERE
  let timerId, readyToCall = true;
  return () => {
    if(readyToCall) {
      readyToCall = false;
      
      timerId = setTimeout(()=> {
        readyToCall = true;
      },interval);
      
      return callback();
    } else {
      clearTimeout(timerId);
      
      timerId = setTimeout(()=> {
        readyToCall = true;
      },interval);
      
      return undefined;
    }
  }
}

// UNCOMMENT THESE TO TEST YOUR WORK!
function giveHi() { return 'hi'; }
const giveHiSometimes = debounce(giveHi, 3000);
console.log(giveHiSometimes()); // -> 'hi'
setTimeout(function() { console.log(giveHiSometimes()); }, 2000); // -> undefined, becuase only 2s have passed since last cal;
setTimeout(function() { console.log(giveHiSometimes()); }, 4000); // -> undefined, since only 2s have passed since last call
setTimeout(function() { console.log(giveHiSometimes()); }, 6000); // -> undefined, since only 2s have passed since last call
setTimeout(function() { console.log(giveHiSometimes()); }, 10000); // -> 'hi', since only 4s have passed since last call
setTimeout(function() { console.log(giveHiSometimes()); }, 13500); // -> 'hi', since only 3.5s have passed since last call

